" turn off compability mode
set nocp

" set how highlights are displayed
hi Normal guibg=black guifg=white
hi clear SpellBad
hi SpellBad cterm=bold ctermfg=red

" highlight trailing whitespace
hi ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+\%#\@<!$/

" main settings
set laststatus=2        " always have status line
set encoding=utf-8      " using UTF-8 terminal
set nobackup            " backups suck
set nowritebackup       " seriously
set history=50          " keep 50 lines of command line history
set ruler               " always show ruler
set showcmd             " show incomplete commands
set vb                  " visual bell
set hidden              " hide buffers when abandoned
set scrolloff=2         " two lines of context
set autoread            " autoread when file changes
set nohlsearch          " do not highlight search terms by default
set spellsuggest=5      " offer five spelling suggestions

" wild options
set wildmode=longest,list,full
set wildmenu
set wildignorecase
set wildignore+=*.o,*.zip,*.pyc

" fancy listchars
set listchars=eol:⏎,tab:␉·,trail:␠,nbsp:⎵

" backspace in visual mode deletes selection
vnoremap <BS> d

" tab character
inoremap <S-Tab> <C-V><Tab>

" enable syntax highlighting
syntax enable

" abbreviations
iabbrev teh the
iabbrev #i #include
cabbrev W w
nnoremap ; :

" blank line shortcuts
nmap N O<Esc>
nmap n o<Esc>

" set lead character for shortcuts
let mapleader = ","

" general shortcuts
map <silent> <leader>sl :set list!<CR>
map <leader>d :silent !mupdf %<.pdf<CR>
map <leader>r :silent !./%<CR>
map <leader>f :CtrlP<CR>

" spelling shortcuts
map <silent> <leader>ss :setlocal spell!<CR>
map <silent> <leader>sn ]s
map <silent> <leader>sp [s
map <silent> <leader>sa zg
map <silent> <leader>s? z=

" vimrc shortcuts
map <leader>ev :e ~/.vimrc<CR>
map <leader>sv :source ~/.vimrc<CR>

" clipboard shortcuts
nmap <leader>y "+yy
vmap <leader>y "+y
map <leader>P "+p
map <silent> <leader>so :set paste!<CR>

" c programming
map <silent> <leader>h :e %:r.h<CR>
map <silent> <leader>k :CtrlPTag<CR>
map <silent> <leader>c <C-]>

" clang-format
function! Clangformat()
    let ln = line('.')
    %! clang-format %
    call cursor(ln, 0)
endfunction
map <silent> <leader>l :call Clangformat()<CR>

" gitgutter
map <silent> <leader>gg :GitGutterToggle<CR>
map <silent> <leader>gh :GitGutterLineHighlightsToggle<CR>

" fugitive
map <silent> <leader>gs :Gstatus<CR>
map <silent> <leader>gw :Gwrite<CR>
map <silent> <leader>gc :Gcommit<CR>

" nerdtree
map <silent> <leader>t :NERDTreeToggle<CR>

" split window shortcuts
map <space>w <c-w><c-w>
map <leader>w <c-w><c-w>
map <space><space> <c-W>_
map <space>= <c-W>=
map <space>r <c-W>r
map <space>o <c-W>o
if bufwinnr(1)
    map + <c-W>+
    map - <c-W>-
endif

" buffer shortcuts
nmap <leader>n :bnext<CR>
nmap <leader>p :bprev<CR>
nmap <leader>q :bprev <BAR> bd #<CR>
nmap <leader>o :Bonly<CR>
nmap <C-t> :enew<CR>
imap <C-t> <Esc>:enew<CR>

" four space tabs
set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab

" set file types of unknown extensions
au BufRead,BufNewFile,BufEnter *.pde setfiletype cpp
au BufRead,BufNewFile,BufEnter *.json setfiletype javascript

" spellcheck markdown and gitcommit
au FileType markdown setlocal spell spelllang=en_us
au FileType gitcommit setlocal spell spelllang=en_us

" tabs in conf files (LDM, etc.)
function! Ldmsetup()
    setlocal tabstop=8 noexpandtab
    set list
    set listchars=tab:␉·
endfunction
au BufWinEnter ldmd.conf,pqact*.conf call Ldmsetup()

" highlight long lines
au BufWinEnter *.c,*.h let w:m1=matchadd('ErrorMsg', '\%>80v.\+', -1)

" use sudo for root owned files
cmap w!! w !sudo tee % > /dev/null<cr>

" airline
let g:airline_theme='light'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#ycm#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_symbols = get(g:,'airline_symbols',{})
let g:airline_symbols.linenr = ''

" Markdown specific options for minimal UI
function! Mdsetup()
    let g:airline_section_x = 'md'
    let g:airline_section_z = '%#__accent_bold#%{g:airline_symbols.linenr}%4l%#__restore__#'
    let g:airline_symbols.spell = 'sp'
    let g:airline_mode_map = {
        \ '__' : '-',
        \ 'n'  : 'N',
        \ 'i'  : 'I',
        \ 'R'  : 'R',
        \ 'c'  : 'C',
        \ 'v'  : 'V',
        \ 'V'  : 'V',
        \ '' : 'V',
        \ 's'  : 'S',
        \ }
endfunction
au FileType markdown call Mdsetup()

" Syntastic/YouCompleteMe
let g:syntastic_error_symbol = '❌'
let g:syntastic_style_error_symbol = '⁉️'
let g:syntastic_warning_symbol = '⚠️'
let g:syntastic_style_warning_symbol = '!'
hi YcmErrorSign ctermbg=NONE
hi YcmErrorSign ctermbg=NONE
hi YcmWarningSection ctermfg=yellow ctermbg=black
nnoremap <Leader>z :YcmCompleter GetType<CR>
nnoremap <Leader>x :YcmCompleter FixIt<CR>

" NERDTree
let NERDTreeQuitOnOpen = 1
let NERDTreeIgnore = ['\.pyc$','\.o$']

" GitGutter
let g:gitgutter_enabled = 0
hi SignColumn ctermbg=0
hi GitGutterAddDefault ctermbg=0
hi GitGutterChangeDefault ctermbg=0
hi GitGutterDeleteDefault ctermbg=0

if version >= 600
  filetype plugin indent on
endif
